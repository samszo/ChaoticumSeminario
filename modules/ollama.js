async function t(t,e){return(await async function(){if("undefined"==typeof window)return(await import("fetch")).default;return window.fetch}())(t,e)}class e{abortController;constructor(){this.abortController=new AbortController}abort(){this.abortController.abort()}async processStreamReader(t,e,r){let o="";try{let s;for(;s=await t.read(),!s.done;)o=this.processBuffer(o+e.decode(s.value,{stream:!0}),r);o.length>0&&this.processBuffer(o,r,!0)}catch(t){t instanceof Error?r({error:t.message}):r({error:String(t)})}}async processNodeStream(t,e,r){let o="";t.on("data",(t=>{o=this.processBuffer(o+e.decode(t,{stream:!0}),r)})),t.on("end",(()=>{o.length>0&&this.processBuffer(o,r,!0)})),t.on("error",(t=>{r({error:t.message})}))}processBuffer(t,e,r=!1){let o,s=null;for(;-1!==(o=t.indexOf("\n"));){const r=t.slice(0,o).trim();if(t=t.slice(o+1),r)try{const t=JSON.parse(r);s=t,e(!1,t)}catch(t){console.error(`Failed to parse JSON line: ${r}`,t)}}if(r&&t.trim())try{e(!1,JSON.parse(t))}catch(r){s&&s.done?e(!1,s):console.error(`Failed to parse JSON buffer: ${t}`,r)}finally{t=""}else s&&s.done&&(t="");return t}async fetch(e,r,o,s){try{const a=await t(e,{signal:this.abortController.signal,method:"POST",headers:{"Content-Type":"application/json",...r},body:o});if(!a.ok)return void s({error:`HTTP error! status: ${a.status}`});const c=new TextDecoder("utf-8");if("undefined"==typeof window){const{Readable:t}=await import("stream");if(a.body instanceof t)return this.processNodeStream(a.body,c,s)}else{if((n=a.body)&&"function"==typeof n.getReader){const t=a.body.getReader();return this.processStreamReader(t,c,s)}s({error:"Unrecognized stream type"})}}catch(t){t instanceof Error?s({error:t.message}):s({error:String(t)})}var n}}class r{abortController;constructor(){this.abortController=new AbortController}abort(){this.abortController.abort()}async processStreamReader(t,e,r){let o="";try{let s;for(;s=await t.read(),!s.done;)o=this.processBuffer(o+e.decode(s.value,{stream:!0}),r);o.length>0&&this.processBuffer(o,r,!0)}catch(t){t instanceof Error?r({error:t.message}):r({error:String(t)})}}async processNodeStream(t,e,r){let o="";t.on("data",(t=>{o=this.processBuffer(o+e.decode(t,{stream:!0}),r)})),t.on("end",(()=>{o.length>0&&this.processBuffer(o,r,!0)})),t.on("error",(t=>{r({error:t.message})}))}processBuffer(t,e,r=!1){let o,s=null;for(;-1!==(o=t.indexOf("\n"));){const r=t.slice(0,o).trim();if(t=t.slice(o+1),r)try{const t=JSON.parse(r);s=t,e(!1,t)}catch(t){console.error(`Failed to parse JSON line: ${r}`,t)}}if(r&&t.trim())try{e(!1,JSON.parse(t))}catch(r){s&&s.done?e(!1,s):console.error(`Failed to parse JSON buffer: ${t}`,r)}finally{t=""}else s&&s.done&&(t="");return t}async fetch(e,r,o,s){try{const a=await t(e,{signal:this.abortController.signal,method:"POST",headers:{"Content-Type":"application/json",...r},body:o});if(!a.ok)return void s({error:`HTTP error! status: ${a.status}`});const c=new TextDecoder("utf-8");if("undefined"==typeof window){const{Readable:t}=await import("stream");if(a.body instanceof t)return this.processNodeStream(a.body,c,s)}else{if((n=a.body)&&"function"==typeof n.getReader){const t=a.body.getReader();return this.processStreamReader(t,c,s)}s({error:"Unrecognized stream type"})}}catch(t){t instanceof Error?s({error:t.message}):s({error:String(t)})}var n}}class o{abort_controller;constructor(){this.abort_controller=new AbortController}abort(){this.abort_controller.abort()}async fetch(e,r,o){const s=await t(e,{signal:this.abort_controller.signal,method:"POST",headers:{"Content-Type":"application/json",...r},body:o});if(!s.ok){const t=await s.text()||s.status;throw console.error(`HTTP error! status: ${s.status} message: ${t}`),new Error(`[Connection Error]: ${t}`)}return await s.json()}}class s{abort_controller;constructor(){this.abort_controller=new AbortController}abort(){this.abort_controller.abort()}async fetch(e,r,o){const s=await t(e,{signal:this.abort_controller.signal,method:"POST",headers:{"Content-Type":"application/json",...r},body:o});if(!s.ok){const t=await s.text()||s.status;throw console.error(`HTTP error! status: ${s.status} message: ${t}`),new Error(`[Connection Error]: ${t}`)}return await s.json()}}class n{model;url;custom_headers;options;verbose;context;current_stream;current_json_fetch;constructor(t){this.model=t.model,this.url=t.url,this.custom_headers=t.custom_headers||{},this.options=t.options||{},this.verbose=t.verbose||!1,this.context=[],this.current_stream=null,this.current_json_fetch=null}stop(){this.current_stream?.abort()}static from(t){const[e,r]=(t||"").split("@");if(!e||!r)throw new Error("Invalid connection string: use model@url format.");return new n({model:e.trim(),url:r.trim()})}clear(){this.context=[]}createRequestBody(t,e=!1){const r={prompt:t,model:this.model,stream:e};return this.context.length>0&&(r.context=this.context),this.options&&(r.options=this.options),this.verbose&&console.log("Ollama request body:",r),r}createRequestBodyChat(t,e=!0){const r={messages:t,model:this.model,stream:e};return this.options&&(r.options=this.options),this.verbose&&console.log("Ollama request chat body:",r),r}async prompt_stream(t,r){this.current_stream=new e;try{await this.current_stream.fetch(`${this.url}generate`,this.custom_headers,JSON.stringify(this.createRequestBody(t,!0)),((t,e)=>{t?r(t):e&&(e.done&&e.context&&(this.context=e.context),r(!1,e))}))}catch(t){this.verbose&&console.error("Ollama fetch request error:",t),r({error:t instanceof Error?t.message:String(t)})}return this.current_stream}async prompt(t){this.current_json_fetch||(this.current_json_fetch=new o);const e=await this.current_json_fetch.fetch(`${this.url}generate`,this.custom_headers,JSON.stringify(this.createRequestBody(t)));return this.verbose&&console.log("Ollama fetch reponse:",e),e.context&&(this.context=e.context),e}async chat_request(t){const e=await(new s).fetch(`${this.url}chat`,this.custom_headers,JSON.stringify(this.createRequestBodyChat(t,!1)));return this.verbose&&console.log("Ollama fetch reponse:",e),e}async chat(t,e){this.current_stream=new r;try{await this.current_stream.fetch(`${this.url}chat`,this.custom_headers,JSON.stringify(this.createRequestBodyChat(t)),((t,r)=>{t?e(t):e(!1,r)}))}catch(t){this.verbose&&console.error("Ollama fetch request error:",t),e({error:t instanceof Error?t.message:String(t)})}return this.current_stream}}export{n as default};
